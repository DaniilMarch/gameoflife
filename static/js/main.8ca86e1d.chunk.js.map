{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Grid","cells","i","this","props","length","push","react_default","a","createElement","className","key","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","arr","Math","random","state","update","bind","assertThisInitialized","pause","play","restart","updateTimer","setInterval","clearInterval","testIndices","liveNeighbours","console","log","_arr","_i","indice","_unused","setState","App_Grid","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ca86e1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass Grid extends Component {\n  render () {\n    let cells = [];\n    for (let i = 0; i < this.props.cells.length; i++) {\n      this.props.cells[i] ? cells.push(<div className = \"Cell Alive\" key = {i}></div>) : cells.push(<div className = \"Cell Dead\" key = {i}></div>); \n    }\n    return (\n      <div className = \"Grid\">\n        {cells}\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let arr = [];\n    for (let i = 0; i < 50*25; i++) {\n      Math.random() > 0.5 ? arr.push(true) : arr.push(false);\n    }\n    this.state = {\n      cells: arr\n    }\n    this.update = this.update.bind(this);\n    this.pause = this.pause.bind(this);\n    this.play = this.play.bind(this);\n    this.restart = this.restart.bind(this);\n  }\n  componentDidMount() {\n    this.updateTimer = setInterval(this.update, 100)\n  }\n  componentWillUnmount() {\n    clearInterval(this.updateTimer);\n  }\n  update() {\n    let arr = [];\n    let testIndices = [-51, -50, -49, -1, 1, 49, 50, 51];\n    for (let i = 0; i < this.state.cells.length; i++) {\n      //Counting live neighbours\n      let liveNeighbours = 0;\n      if (i % 50 == 0) {\n        testIndices = [-50, -49, 1, 50, 51];\n      } else if (i % 50 == 49) {\n        testIndices = [-51, -50, -1, 49, 50];\n      } else {\n        testIndices = [-51, -50, -49, -1, 1, 49, 50, 51];\n      }\n      console.log(testIndices);\n      for (let indice of testIndices) {\n        try {\n          if (this.state.cells[i+indice]) {\n            liveNeighbours += 1;\n          } else {\n            continue;\n          }\n        } catch {\n          continue;\n        }\n      }\n      //Deciding whether cell is alive or dead according to number of neighbours\n      if (this.state.cells[i]) {\n          if (liveNeighbours < 2) {\n            arr.push(false);\n          } else if (liveNeighbours === 2 || liveNeighbours === 3) {\n            arr.push(true);\n          } else if (liveNeighbours > 3) {\n            arr.push(false);\n          }\n        } else if (!this.state.cells[i]) {\n          if (liveNeighbours === 3) {\n            arr.push(true);\n          } else {\n            arr.push(false);\n          }\n        }\n      }\n      this.setState({cells: arr});\n    }\n  pause() {\n    clearInterval(this.updateTimer);\n  }\n  play() {\n    clearInterval(this.updateTimer);\n    this.updateTimer = setInterval(this.update, 100);\n  }\n  restart() {\n    let arr = [];\n    for (let i = 0; i < 50*25; i++) {\n      Math.random() > 0.5 ? arr.push(true) : arr.push(false);\n    }\n    this.setState({cells: arr});\n  }\n  render() {\n    return (\n      <div className = \"App\">\n        <Grid cells = {this.state.cells}/>\n        <div className = \"Controller\">\n          <button onClick = {this.play}>play</button>\n          <button onClick = {this.pause}>pause</button>\n          <button onClick = {this.restart}>restart</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}